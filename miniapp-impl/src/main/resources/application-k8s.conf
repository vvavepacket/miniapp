include "application"

play.server.pidfile.path=/dev/null
akka.discovery.method = akka-dns
play.http.secret.key="akapmoko!!!"
play.http.secret.key=${?APPLICATION_SECRET}

## Akka Cluster
# after 60s of unsuccessul attempts to form a cluster,
# the actor system will shut down
akka.cluster.shutdown-after-unsuccessful-join-seed-nodes = 60s

# exit jvm on actor system termination
# this will allow Kubernetes to restart the pod
lagom.cluster.exit-jvm-when-system-terminated = on

## Cluster bootstrap
akka.management {
  cluster.bootstrap {
    contact-point-discovery {
      discovery-method = kubernetes-api
      service-name = "miniapp"
      required-contact-point-nr = ${REQUIRED_CONTACT_POINT_NR}
    }
  }
}

cassandra.default {
  ## list the contact points  here
  ##contact-points = ["172.17.0.11"]
  contact-points = ["miniapp-cassandra-nodeport-service"]
  ## override Lagomâ€™s ServiceLocator-based ConfigSessionProvider
  session-provider = akka.persistence.cassandra.ConfigSessionProvider
}

cassandra-journal {
  contact-points = ${cassandra.default.contact-points}
  session-provider = ${cassandra.default.session-provider}
}

cassandra-snapshot-store {
  contact-points = ${cassandra.default.contact-points}
  session-provider = ${cassandra.default.session-provider}
}

lagom.persistence.read-side.cassandra {
  contact-points = ${cassandra.default.contact-points}
  session-provider = ${cassandra.default.session-provider}
}

# lagom.services {
#   cas_native = "tcp://miniapp-cassandra-nodeport-service:9042"
# }
#
# lagom.akka.discovery {
#   service-name-mappings {
#     # lookup is done using 'my-cassandra-server'
#     # but translated to cassandra.default.svc.cluster.local
#     # and without port name and protocol, ie: DNS A lookup
#     cas_native {
#       lookup = miniapp-cassandra-nodeport-service
#       port-name = http
#       port-protocol = tcp
#     }
#   }
# }

#lagom.services {
#  cas_native = "tcp://miniapp-cassandra-nodeport-service:9042"
#}

#akka.actor.allow-java-serialization = on